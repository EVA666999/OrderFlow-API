import json
import uuid
import logging
from yoomoney import Client, Quickpay
from django.conf import settings
from .models import Payment
from decimal import Decimal

import logging

logger = logging.getLogger('payments')

def create_payment(order):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ YooMoney –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    payment_id = str(uuid.uuid4())
    
    payment = Payment.objects.create(
        order=order,
        payment_id=payment_id,
        amount=order.total_price,
        status=Payment.PENDING
    )
    
    # API-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è redirect URL
    return_url = f"{settings.YOOMONEY_REDIRECT_URL}?label={payment_id}"
    
    quickpay = Quickpay(
        receiver=settings.YOOMONEY_ACCOUNT,
        quickpay_form="shop",
        targets=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}",
        paymentType="SB",
        sum=float(order.total_price),
        label=payment_id,
        successURL=return_url
    )
    
    return quickpay.redirected_url, payment
def check_payment_status(payment_id):
    try:
        payment = Payment.objects.get(payment_id=payment_id)
        order = payment.order

        client = Client(settings.YOOMONEY_TOKEN)
        history = client.operation_history(label=payment_id)

        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–∏—à–ª–æ
        logger.info("Raw history: %s", history)
        logger.info("–¢–∏–ø history: %s", type(history))

        operations = history.operations  # üí• –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ History ‚Äî –æ–±—ä–µ–∫—Ç
        if operations:
            for op in operations:
                logger.debug(f"–û–ø–µ—Ä–∞—Ü–∏—è: label={op.label}, —Å—Ç–∞—Ç—É—Å={op.status}, —Å—É–º–º–∞={op.amount}")

            operation = operations[0]
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.status}")

            # ‚úÖ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            if operation.status in ["success", "succeeded"]:
                op_amount = Decimal(str(operation.amount))
                pay_amount = payment.amount  # –≠—Ç–æ —É–∂–µ Decimal
                if abs(op_amount - pay_amount) <= Decimal('0.1'):
                    payment.status = Payment.SUCCEEDED
                    payment.save()
                    order.status = "paid"
                    order.save()
                    return True
                logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—É–º–º—ã: –æ–ø–µ—Ä–∞—Ü–∏—è={op_amount}, –∑–∞–∫–∞–∑={pay_amount}, —Ä–∞–∑–Ω–∏—Ü–∞={abs(op_amount - pay_amount)}")

        else:
            logger.info("–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç")

        return False

    except Payment.DoesNotExist:
        logger.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payment_status: {str(e)}")
        return False