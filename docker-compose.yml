# volumes:
#   pg_data1:

# services:
#   db1:
#     image: postgres:13
#     env_file: .env
#     volumes:
#       - pg_data1:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"

#   redis:
#     image: redis:7
#     restart: always
#     ports:
#       - "6379:6379"

#   backend:
#     build: /api
#     env_file: .env
#     ports:
#       - "8000:8000"
#     networks:
#       - backend_network
#     depends_on:
#       - db1
#       - redis

#   nginx:
#     build: ./api/nginx
#     env_file: .env
#     ports:
#       - "80:80"
#     networks:
#       - backend_network
#     depends_on:
#       - backend

# networks:
#   backend_network:
#     driver: bridge


###################
version: "3.2"

volumes:
  pg_data:
  static_data:
  media_data:
  kafka_data:
  zookeeper_data:
  certbot_conf:
  certbot_www:

services:
  db:
    image: postgres:13
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend_network

  redis:
    image: redis:7
    restart: always
    networks:
      - backend_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend_network
    
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend_network

  backend:
    build: ./api
    env_file: .env
    volumes:
      - static_data:/staticfiles
      - media_data:/media
    depends_on:
      - db
      - redis
      - kafka
    networks:
      - backend_network
    command: >
      bash -c "python manage.py migrate && 
               python manage.py collectstatic --noinput &&
               gunicorn api.wsgi:application --bind 0.0.0.0:8000"

  celery_worker:
    build: ./api
    env_file: .env
    depends_on:
      - backend
      - redis
      - kafka
    networks:
      - backend_network
    command: celery -A api worker --loglevel=info

  celery_beat:
    build: ./api
    env_file: .env
    depends_on:
      - backend
      - redis
      - celery_worker
    networks:
      - backend_network
    command: celery -A api beat --loglevel=info

  nginx:
    image: nginx:1.22.1
    volumes:
      - ./api/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_data:/staticfiles
      - media_data:/media
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend_network
    depends_on:
      - backend

  certbot:
    image: certbot/certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot -d vasilekretsu.ru --agree-tos --email eseeva228@gmail.com --force-renewal

networks:
  backend_network:
    driver: bridge