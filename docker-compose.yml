# volumes:
#   pg_data1:

# services:
#   db1:
#     image: postgres:13
#     env_file: .env
#     volumes:
#       - pg_data1:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"

#   redis:
#     image: redis:7
#     restart: always
#     ports:
#       - "6379:6379"

#   backend:
#     build: /api
#     env_file: .env
#     ports:
#       - "8000:8000"
#     networks:
#       - backend_network
#     depends_on:
#       - db1
#       - redis

#   nginx:
#     build: ./api/nginx
#     env_file: .env
#     ports:
#       - "80:80"
#     networks:
#       - backend_network
#     depends_on:
#       - backend

# networks:
#   backend_network:
#     driver: bridge


###################
version: "3.2"

volumes:
  pg_data1:
  static_data:
  media_data:
  kafka_data:
  zookeeper_data:

services:
  db1:
    image: postgres:13
    env_file: .env
    volumes:
      - pg_data1:/var/lib/postgresql/data
    networks:
      - backend_network
    expose:
      - "5432"
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    command: ["postgres", "-c", "listen_addresses=*"]

  redis:
    image: redis:7
    restart: always
    networks:
      - backend_network
    expose:
      - "6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend_network
    
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend_network

  backend:
    build: ./api
    env_file: .env
    volumes:
      - static_data:/staticfiles
      - media_data:/media
    depends_on:
      - db1
      - redis
      - kafka
    environment:
      - SECRET_KEY=django-insecure-1(ny8xf!hmj6&v0kte#a!d--i&ybk7_10zd+qif!_(+d22*lhs
      - SERVICE_NAME=backend
      - SECURE_SSL_REDIRECT=False
      - SESSION_COOKIE_SECURE=False
      - CSRF_COOKIE_SECURE=False
    networks:
      - backend_network
    command: >
      bash -c "
        echo 'Waiting for PostgreSQL...'
        sleep 10
        python manage.py migrate && 
        python manage.py collectstatic --noinput &&
        gunicorn api.wsgi:application --bind 0.0.0.0:8000
      "

  celery_worker:
    build: ./api
    volumes:
      - ./api:/app
    env_file: .env
    depends_on:
      - backend
      - redis
      - kafka
    environment:
      - SERVICE_NAME=celery_worker
    networks:
      - backend_network
    command: celery -A api worker --loglevel=info

  celery_beat:
    build: ./api
    volumes:
      - ./api:/app
    env_file: .env
    depends_on:
      - backend
      - redis
      - celery_worker
    environment:
      - SERVICE_NAME=celery_beat
    networks:
      - backend_network
    command: celery -A api beat --loglevel=info

  nginx:
    build: ./api/nginx
    env_file: .env
    volumes:
      - static_data:/staticfiles
      - media_data:/media
    ports:
      - "80:80"
    networks:
      - backend_network
    depends_on:
      - backend
    restart: always
  
networks:
  backend_network:
    driver: bridge