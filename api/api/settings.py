"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from datetime import timedelta, timezone
from pathlib import Path
from rest_framework_simplejwt.authentication import JWTAuthentication
from django.core.exceptions import ImproperlyConfigured


from dotenv import load_dotenv

load_dotenv()  # Загружаем переменные окружения

UTC = timezone.utc
CORS_ORIGIN_ALLOW_ALL = True  # Разрешить доступ с любых источников

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-1(ny8xf!hmj6&v0kte#a!d--i&ybk7_10zd+qif!_(+d22*lhs")

if not SECRET_KEY:
    raise ImproperlyConfigured("The SECRET_KEY setting must not be empty.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "79.133.183.58",
    "127.0.0.1",
    "localhost",
    "vasilekretsu.ru",
    "www.vasilekretsu.ru",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "api_django",
    "rest_framework",
    "djoser",
    "users",
    "channels",
    "aichat",
    "drf_yasg",
    "corsheaders",
    "social_django",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "api_django.middleware.JWTAuthenticationMiddleware",
]

ROOT_URLCONF = "api.urls"

TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
WSGI_APPLICATION = "api.wsgi.application"
ASGI_APPLICATION = "api.asgi.application"  # Замените на название вашего проекта

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("orderflow-api-redis-1", 6379)],
            # Подключение к контейнеру Redis в Docker если docker redis/localhost  "hosts": [("localhost", 6379)],  # Подключение к контейнеру Redis в Docker если docker redis/localhost
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://orderflow-api-redis-1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}


# local
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://localhost:6379/1",  # для локального подключения, если Redis работает на хосте
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         },
#     }
# }


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("POSTGRES_DB_local", "django"),
#         "USER": os.getenv("POSTGRES_USER_local", "django"),
#         "PASSWORD": os.getenv("POSTGRES_PASSWORD_local", ""),
#         "HOST": os.getenv("DB_HOST_local", ""),
#         "PORT": os.getenv("DB_PORT_local", 5432),
#     }
# }

DATABASES = {
    "default": {
        # Меняем настройку Django: теперь для работы будет использоваться
        # бэкенд postgresql
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "django"),
        "USER": os.getenv("POSTGRES_USER", "django"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", ""),
        "HOST": os.getenv("DB_HOST", ""),
        "PORT": os.getenv("DB_PORT", 5432),
    }
}
CELERY_BROKER_URL = "redis://redis:6379/0"


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "collected_static"


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}




SIMPLE_JWT = {
    # Устанавливаем срок жизни токена
    "ACCESS_TOKEN_LIFETIME": timedelta(days=20),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

AUTH_USER_MODEL = "users.User"  # Замените 'yourapp' на имя вашего приложения

DJOSER = {
    "SERIALIZERS": {
        "user_create": "users.serializers.CustomUserCreateSerializer",
    }
}


MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.mail.ru"  # SMTP-сервер для Mail.ru
EMAIL_PORT = 587  # Используем порт 587 для TLS
EMAIL_USE_TLS = True  # Используем TLS для безопасности
EMAIL_HOST_USER = "ukratitelkisok9913@inbox.ru"
EMAIL_HOST_PASSWORD = os.getenv(
    "EMAIL_HOST_PASSWORD"
)  # Ваш пароль (или пароль приложения, если включена двухфакторная аутентификация)
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


STATIC_URL = "/static/"

# Для сборки статических файлов
STATIC_ROOT = os.path.join(BASE_DIR, "static")

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": "JWT Authorization header using the Bearer scheme. Example: 'Bearer <your_token>'",
        }
    },
}
SWAGGER_USE_COMPAT_RENDERERS = False

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',  # Или INFO
#             'propagate': True,
#         },
#     },
# }


SOCIAL_AUTH_YANDEX_OAUTH2_KEY = 'e54a436087b2456a9893e77d01592337'
SOCIAL_AUTH_YANDEX_OAUTH2_SECRET = '0b75eb2e67d04c8eaa011c59ac5bb2aa'
SOCIAL_AUTH_YANDEX_OAUTH2_SCOPE = ['email']
SOCIAL_AUTH_YANDEX_OAUTH2_REDIRECT_URI = 'http://vasilekretsu.ru/auth/complete/yandex-oauth2/'

# Указываем, что будем работать с токенами, а не сессиями
SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
    'social_core.backends.yandex.YandexOAuth2',
    'django.contrib.auth.backends.ModelBackend',  # Используем стандартную модель пользователей
)


SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.user.user_details',
    'api.auth_pipeline.activate_user',  # Добавляем кастомный шаг
)
